import logging
import re
import requests
import sqlite3
import threading
import time
import asyncio
import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# --- üîê –ó–ê–©–ò–¢–ê –ö–û–î–ê ---
TOKEN = os.getenv("WB_BOT_TOKEN")
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –∑–∞–¥–∞–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è WB_BOT_TOKEN")

if "8330838475" in TOKEN and "AAHt2IXITb62-IfAwr8ZLKpGACSRAL15BlA" in TOKEN:
    pass
else:
    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω! –≠—Ç–æ—Ç –±–æ—Ç –∑–∞—â–∏—â—ë–Ω –æ—Ç –∫—Ä–∞–∂–∏.")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('wb_prices.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS subscriptions (
        chat_id INTEGER,
        article TEXT,
        name TEXT,
        price REAL,
        last_checked TEXT,
        active INTEGER DEFAULT 1
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS user_settings (
        chat_id INTEGER PRIMARY KEY,
        check_interval INTEGER DEFAULT 1800
    )''')
    conn.commit()
    conn.close()

# –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
def add_subscription(chat_id: int, article: str, name: str, price: float):
    conn = sqlite3.connect('wb_prices.db')
    c = conn.cursor()
    c.execute('''
        INSERT OR REPLACE INTO subscriptions (chat_id, article, name, price, last_checked, active)
        VALUES (?, ?, ?, ?, datetime('now'), 1)
    ''', (chat_id, article, name, price))
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_subscriptions(chat_id: int):
    conn = sqlite3.connect('wb_prices.db')
    c = conn.cursor()
    c.execute('SELECT article, name, price, last_checked FROM subscriptions WHERE chat_id = ? AND active = 1', (chat_id,))
    rows = c.fetchall()
    conn.close()
    return rows

# –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
def remove_subscription(chat_id: int, article: str):
    conn = sqlite3.connect('wb_prices.db')
    c = conn.cursor()
    c.execute('DELETE FROM subscriptions WHERE chat_id = ? AND article = ?', (chat_id, article))
    conn.commit()
    conn.close()

# –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
def deactivate_subscription(article: str):
    conn = sqlite3.connect('wb_prices.db')
    c = conn.cursor()
    c.execute('UPDATE subscriptions SET active = 0 WHERE article = ?', (article,))
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
def get_all_active_subscriptions():
    conn = sqlite3.connect('wb_prices.db')
    c = conn.cursor()
    c.execute('SELECT * FROM subscriptions WHERE active = 1')
    rows = c.fetchall()
    conn.close()
    return rows

# –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –∏ –¥–∞—Ç—É –ø—Ä–æ–≤–µ—Ä–∫–∏
def update_price_and_check_time(article: str, new_price: float):
    conn = sqlite3.connect('wb_prices.db')
    c = conn.cursor()
    c.execute('''
        UPDATE subscriptions
        SET price = ?, last_checked = datetime('now')
        WHERE article = ?
    ''', (new_price, article))
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_settings(chat_id: int):
    conn = sqlite3.connect('wb_prices.db')
    c = conn.cursor()
    c.execute('SELECT check_interval FROM user_settings WHERE chat_id = ?', (chat_id,))
    row = c.fetchone()
    conn.close()
    if row:
        return row[0]
    else:
        set_user_settings(chat_id, 1800)
        return 1800

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def set_user_settings(chat_id: int, interval: int):
    conn = sqlite3.connect('wb_prices.db')
    c = conn.cursor()
    c.execute('INSERT OR REPLACE INTO user_settings (chat_id, check_interval) VALUES (?, ?)', (chat_id, interval))
    conn.commit()
    conn.close()

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
def extract_article_from_url(url: str) -> str | None:
    match = re.search(r'/catalog/(\d+)/detail', url)
    if match:
        return match.group(1)
    return None

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å Wildberries
def get_price_from_wb(article: str) -> dict | None:
    try:
        url = f"https://card.wb.ru/cards/v2/detail?nm={article}&dest=-1257786&locale=ru&lang=ru"
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Accept": "*/*",
            "Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
            "Referer": "https://www.wildberries.ru/"
        }
        response = requests.get(url, headers=headers, timeout=10)
        if response.status_code != 200:
            return None

        data = response.json()
        if not data.get("data") or not data["data"].get("products"):
            return None

        product = data["data"]["products"][0]
        name = product.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        sizes = product.get("sizes", [])
        if not sizes:
            return None

        size = sizes[0]
        price_data = size.get("price", {})
        total_price_raw = price_data.get("total")
        if total_price_raw is None:
            return None

        return {
            "name": name,
            "price": total_price_raw / 100
        }

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
        return None

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"), KeyboardButton("üìã –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã")],
        [KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä"), KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        [KeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_msg = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏ –Ω–∞ Wildberries!\n\n"
        "üìå –°—É—Ç—å –±–æ—Ç–∞:\n"
        "- –û—Ç–ø—Ä–∞–≤–ª—è–µ—à—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä ‚Üí —è –∑–∞–ø–æ–º–∏–Ω–∞—é –µ–≥–æ\n"
        "- –†–∞–∑ –≤ N –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä—è—é —Ü–µ–Ω—É\n"
        "- –ï—Å–ª–∏ —Ü–µ–Ω–∞ —Å–Ω–∏–∂–∞–µ—Ç—Å—è ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!\n\n"
        "‚ÑπÔ∏è –¶–µ–Ω—ã –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ WB –ö–æ—à–µ–ª—å—ë–∫.\n\n"
        "üì© –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ —Å—é–¥–∞: https://t.me/NordStorm_Seller\n\n"
        "üëá –ù–∞—á–Ω—ë–º? –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await update.message.reply_text(welcome_msg)
    await show_main_menu(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –∏ —Ç–µ–∫—Å—Ç–∞
async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    chat_id = update.message.chat_id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"
    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä":
        await update.message.reply_text(
            "üîó –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Wildberries (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://www.wildberries.ru/catalog/12345678/detail.aspx)"
        )
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "üìã –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã"
    elif text == "üìã –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã":
        subs = get_user_subscriptions(chat_id)
        if not subs:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
            await show_main_menu(update, context)
            return

        message = "üìå –í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã:\n\n"
        for article, name, price, last_checked in subs:
            message += f"üì¶ {name}\n"
            message += f"üí∞ –¶–µ–Ω–∞: {price:,.0f} ‚ÇΩ\n"
            message += f"üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_checked}\n"
            message += f"üîó https://www.wildberries.ru/catalog/{article}/detail.aspx\n\n"

        await update.message.reply_text(message)
        await show_main_menu(update, context)
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä"
    elif text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä":
        subs = get_user_subscriptions(chat_id)
        if not subs:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
            await show_main_menu(update, context)
            return

        message = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
        for i, (article, name, price, _) in enumerate(subs, 1):
            message += f"{i}. {name} ‚Äî {price:,.0f} ‚ÇΩ\n"
        
        message += "\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å."

        context.user_data['subscriptions'] = subs
        await update.message.reply_text(message)
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        interval = get_user_settings(chat_id)
        minutes = interval // 60
        keyboard = [
            [InlineKeyboardButton(f"‚è±Ô∏è {minutes} –º–∏–Ω", callback_data=f"set_interval_{interval}")]
        ]
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚è±Ô∏è 1 —á–∞—Å", callback_data="set_interval_3600")],
            [InlineKeyboardButton("‚è±Ô∏è 6 —á–∞—Å–æ–≤", callback_data="set_interval_21600")],
            [InlineKeyboardButton("‚è±Ô∏è 12 —á–∞—Å–æ–≤", callback_data="set_interval_43200")],
            [InlineKeyboardButton("‚è±Ô∏è 24 —á–∞—Å–∞", callback_data="set_interval_86400")]
        ])
        await update.message.reply_text(
            f"–¢–µ–∫—É—â–∞—è —á–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: –∫–∞–∂–¥—ã–µ {minutes} –º–∏–Ω—É—Ç\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —á–∞—Å—Ç–æ—Ç—É:",
            reply_markup=reply_markup
        )
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"
    elif text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        await update.message.reply_text(
            "üì© –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ —Å—é–¥–∞:\n"
            "https://t.me/NordStorm_Seller"
        )
        await show_main_menu(update, context)
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Å—ã–ª–∫—É
    elif "wildberries.ru" in text:
        article = extract_article_from_url(text)
        if not article:
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞—Ä—Ç–∏–∫—É–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –≤–∏–¥–∞:\n"
                "https://www.wildberries.ru/catalog/12345678/detail.aspx"
            )
            await show_main_menu(update, context)
            return

        product_info = get_price_from_wb(article)
        if not product_info:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await show_main_menu(update, context)
            return

        name = product_info["name"]
        price = product_info["price"]

        add_subscription(chat_id, article, name, price)

        await update.message.reply_text(
            f"‚úÖ –¢–æ–≤–∞—Ä: {name}\n"
            f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price:,.0f} ‚ÇΩ\n"
            f"‚ÑπÔ∏è –ü—Ä–∏ –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ WB –ö–æ—à–µ–ª—å—ë–∫ —Ü–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏–∂–µ.\n\n"
            f"üîî –Ø –Ω–∞—á–Ω—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ —ç—Ç–∏–º —Ç–æ–≤–∞—Ä–æ–º. –£–≤–µ–¥–æ–º–ª—é, –µ—Å–ª–∏ —Ü–µ–Ω–∞ —Å–Ω–∏–∑–∏—Ç—Å—è!"
        )
        await show_main_menu(update, context)
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    elif 'subscriptions' in context.user_data and text.isdigit():
        subs = context.user_data['subscriptions']
        index = int(text) - 1
        if 0 <= index < len(subs):
            article = subs[index][0]
            remove_subscription(chat_id, article)
            await update.message.reply_text(f"‚úÖ –¢–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º {article} —É–¥–∞–ª—ë–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
            del context.user_data['subscriptions']
            await show_main_menu(update, context)
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    else:
        await update.message.reply_text(
            "–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä."
        )
        await show_main_menu(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏ (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    if data.startswith("set_interval_"):
        interval = int(data.split("_")[2])
        chat_id = query.from_user.id
        set_user_settings(chat_id, interval)
        minutes = interval // 60
        await query.edit_message_text(f"‚úÖ –ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: –∫–∞–∂–¥—ã–µ {minutes} –º–∏–Ω—É—Ç")

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω
async def check_prices(app: Application):
    while True:
        subscriptions = get_all_active_subscriptions()
        for sub in subscriptions:
            chat_id, article, name, old_price, _, _ = sub
            new_price_info = get_price_from_wb(article)
            if not new_price_info:
                deactivate_subscription(article)
                continue

            new_price = new_price_info["price"]
            if new_price < old_price:
                message = (
                    f"üìâ –¶–µ–Ω–∞ –Ω–∞ —Ç–æ–≤–∞—Ä —Å–Ω–∏–∑–∏–ª–∞—Å—å!\n"
                    f"–¢–æ–≤–∞—Ä: {name}\n"
                    f"–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {old_price:,.0f} ‚ÇΩ\n"
                    f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price:,.0f} ‚ÇΩ\n"
                    f"‚ÑπÔ∏è –ü—Ä–∏ –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ WB –ö–æ—à–µ–ª—å—ë–∫ —Ü–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –µ—â—ë –Ω–∏–∂–µ."
                )
                try:
                    await app.bot.send_message(chat_id=chat_id, text=message)
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")

            update_price_and_check_time(article, new_price)

        await asyncio.sleep(1800)

# –ó–∞–ø—É—Å–∫
def main():
    if not TOKEN or len(TOKEN) < 10:
        raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!")

    init_db()

    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_message))
    app.add_handler(CallbackQueryHandler(button_callback))

    threading.Thread(target=lambda: asyncio.run(check_prices(app)), daemon=True).start()

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –¥–µ–π—Å—Ç–≤–∏–π!")
    app.run_polling()

if __name__ == '__main__':
    main()